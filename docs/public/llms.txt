# ESLint Plugin Perfectionist

> ESLint plugin for sorting various data such as objects, imports, types, enums, JSX props, etc. Enforce a consistent code style with automatic sorting and organization of your TypeScript and JavaScript code.

ESLint Plugin Perfectionist is a powerful tool designed to set rules for formatting your code and ensuring it remains consistent across your project. This plugin defines rules for sorting various data structures alphabetically, naturally, or by line length. All rules are automatically fixable, making it safe and easy to maintain a consistent codebase.

Key features:

- Automatically fixable rules for safe code formatting
- Support for multiple sorting methods: alphabetical, natural, line-length, and custom
- TypeScript-first with full JavaScript support
- Extensive configuration options for fine-tuning
- Compatible with ESLint v8.45.0 or greater

## Getting Started

- [Introduction](https://perfectionist.dev/guide/introduction.html.md): Learn about ESLint Plugin Perfectionist and how it can help maintain a consistent and high-quality codebase
- [Getting Started](https://perfectionist.dev/guide/getting-started.html.md): Installation and basic configuration guide
- [Integrations](https://perfectionist.dev/guide/integrations.html.md): Set up automatic formatting on save in popular code editors

## Configurations

- [Recommended Alphabetical](https://perfectionist.dev/configs/recommended-alphabetical.html.md): All plugin rules with alphabetical sorting in ascending order
- [Recommended Natural](https://perfectionist.dev/configs/recommended-natural.html.md): Natural sorting that handles numbers intuitively (e.g., item-1, item-2, item-10)
- [Recommended Line Length](https://perfectionist.dev/configs/recommended-line-length.html.md): Sort by code line length (shorter lines first)
- [Recommended Custom](https://perfectionist.dev/configs/recommended-custom.html.md): Define your own custom alphabet for sorting

## Rules

- [sort-array-includes](https://perfectionist.dev/rules/sort-array-includes.html.md): Sort array elements in `includes` method
- [sort-classes](https://perfectionist.dev/rules/sort-classes.html.md): Sort class members and properties
- [sort-decorators](https://perfectionist.dev/rules/sort-decorators.html.md): Sort decorators on classes, methods, and properties
- [sort-enums](https://perfectionist.dev/rules/sort-enums.html.md): Sort TypeScript enum members
- [sort-exports](https://perfectionist.dev/rules/sort-exports.html.md): Sort export statements
- [sort-heritage-clauses](https://perfectionist.dev/rules/sort-heritage-clauses.html.md): Sort implements/extends clauses
- [sort-imports](https://perfectionist.dev/rules/sort-imports.html.md): Sort import declarations
- [sort-interfaces](https://perfectionist.dev/rules/sort-interfaces.html.md): Sort TypeScript interface properties
- [sort-intersection-types](https://perfectionist.dev/rules/sort-intersection-types.html.md): Sort TypeScript intersection types
- [sort-jsx-props](https://perfectionist.dev/rules/sort-jsx-props.html.md): Sort JSX/TSX component props
- [sort-maps](https://perfectionist.dev/rules/sort-maps.html.md): Sort Map elements
- [sort-modules](https://perfectionist.dev/rules/sort-modules.html.md): Sort module members
- [sort-named-exports](https://perfectionist.dev/rules/sort-named-exports.html.md): Sort named exports
- [sort-named-imports](https://perfectionist.dev/rules/sort-named-imports.html.md): Sort named imports
- [sort-object-types](https://perfectionist.dev/rules/sort-object-types.html.md): Sort TypeScript object type properties
- [sort-objects](https://perfectionist.dev/rules/sort-objects.html.md): Sort object properties
- [sort-sets](https://perfectionist.dev/rules/sort-sets.html.md): Sort Set elements
- [sort-switch-case](https://perfectionist.dev/rules/sort-switch-case.html.md): Sort switch statement cases
- [sort-union-types](https://perfectionist.dev/rules/sort-union-types.html.md): Sort TypeScript union types
- [sort-variable-declarations](https://perfectionist.dev/rules/sort-variable-declarations.html.md): Sort variable declarations

## Optional

- [GitHub Repository](https://github.com/azat-io/eslint-plugin-perfectionist): Source code, issues, and contributions
- [NPM Package](https://npmjs.com/package/eslint-plugin-perfectionist): Package details and version history
- [Alphabet Utility](https://github.com/azat-io/eslint-plugin-perfectionist#alphabet-utility): Helper class for creating custom alphabets
